# Construir las URL para los detalles de la especie
url_name  <- paste0("https://www.speciesfungorum.org/Names/SynSpecies.asp?RecordID=", updated_id)
url_class <- paste0("https://www.indexfungorum.org/names/NamesRecord.asp?RecordID=", updated_id)
result <- tryCatch({
# Obtener información de la página web
web_name <- rvest::read_html(url_name) %>%
rvest::html_nodes("p") %>%
rvest::html_text()
# Obtener la clasificación taxonómica
tax_class <- extract_classification(url_class)
# Si no es un nombre de referencia, procesar el nombre
if (!str_detect(web_name[1], "Click on")) {
current_name <- web_name[1] %>%
str_remove("Current Name:") %>%
str_remove("\\,.+") %>%
str_remove("\\s\\[.+\\]")
# Si no se requiere información adicional, solo retornar el nombre limpio
if (!add_info) {
return(clean_names(current_name))
}
# Obtener los sinónimos
synonyms <- web_name[2] %>%
str_remove("Synonymy:") %>%
str_remove_all("\\s\\[\\d+\\]") %>%
str_split(" \\(\\d+\\)") %>%
unlist() %>%
clean_names() %>%
str_extract(".+") %>%
unique() %>%
na.omit()
# Asegurarse de que build_info siempre devuelva un tibble
tibble_result <- build_info(current_name = current_name, id = updated_id, synonyms = synonyms, classification = tax_class)
# Devolver el tibble
return(tibble_result)
} else {
# Si no se puede obtener información válida, retornar el nombre base
return(tibble(fungi_name = base_name))
}
}, error = function(e) {
warning("Error processing web page: ", e$message)
return(tibble())  # Devolver un tibble vacío si hay error
})
return(result)
})
# Si no se requiere información adicional, devolver solo un vector de resultados
if (!add_info) {
return(unlist(result))
}
return(result)
}
test_that("get_fungal_name returns list with add_info = TRUE", {
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE)
expect_true(is_tibble(result), label = "Expected a tibble, got something else.")
expect_equal(ncol(result), 11)  # Asegúrate de que tenga el número correcto de columnas
expect_false(is.null(result), label = "Expected non-null result.")
})
test_that("get_fungal_name returns list with add_info = TRUE", {
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE)
expect_true(is_tibble(result))
expect_equal(ncol(result), 11)  # Asegúrate de que tenga el número correcto de columnas
})
get_fungal_name <- function(name, add_info = FALSE) {
# Asegurarse de que los nombres estén en formato correcto, manejar NA
name <- ifelse(is.na(name), NA, str_to_sentence(name))
result <- purrr::map(name, ~ {
# Si el nombre es NA, se devuelve NA
if (is.na(.)) {
return(NA)
}
# Limpiar el nombre y clasificarlo
name <- clean_names(.)
classification <- classify_name(name)
type <- classification$type
base_name <- classification$name
# Si no es una especie, se retorna NA
if (type != "sp.") {
warning(paste("The function can only update names for taxa classified as species. The name", name, "is classified as", type, "and therefore no update will be made."))
return(NA)
}
# Intentar buscar la especie en Index Fungorum
IF_data <- tryCatch({
taxize::fg_name_search(base_name, limit = 6000) %>%
filter(infraspecific_rank == type)
}, error = function(e) {
warning("Failed to query Index Fungorum: ", e$message)
return(tibble())  # Devuelve un tibble vacío si hay error
})
# Si no se encuentra ningún dato, se retorna NA
if (nrow(IF_data) == 0) {
warning(paste("No updates found for the species", base_name, "in Index Fungorum."))
return(NA)
}
# Renombrar la columna para asegurar que la ID se tenga correctamente
IF_data <- IF_data %>%
dplyr::rename(id = dplyr::if_else(
"current_name_record_number" %in% names(.),
"current_name_record_number",
"record_number"
))
# Obtener el ID actualizado
updated_id <- get_updated_id(IF_data, base_name)
# Si no hay un ID válido, retornar NA
if (is.na(updated_id)) {
warning(paste("No valid ID found for the species", base_name, "in Index Fungorum."))
return(NA)
}
# Construir las URL para los detalles de la especie
url_name  <- paste0("https://www.speciesfungorum.org/Names/SynSpecies.asp?RecordID=", updated_id)
url_class <- paste0("https://www.indexfungorum.org/names/NamesRecord.asp?RecordID=", updated_id)
result <- tryCatch({
# Obtener información de la página web
web_name <- rvest::read_html(url_name) %>%
rvest::html_nodes("p") %>%
rvest::html_text()
# Obtener la clasificación taxonómica
tax_class <- extract_classification(url_class)
# Si no es un nombre de referencia, procesar el nombre
if (!str_detect(web_name[1], "Click on")) {
current_name <- web_name[1] %>%
str_remove("Current Name:") %>%
str_remove("\\,.+") %>%
str_remove("\\s\\[.+\\]")
# Si no se requiere información adicional, solo retornar el nombre limpio
if (!add_info) {
return(clean_names(current_name))
}
# Obtener los sinónimos
synonyms <- web_name[2] %>%
str_remove("Synonymy:") %>%
str_remove_all("\\s\\[\\d+\\]") %>%
str_split(" \\(\\d+\\)") %>%
unlist() %>%
clean_names() %>%
str_extract(".+") %>%
unique() %>%
na.omit()
# Asegurarse de que build_info siempre devuelva un tibble
tibble_result <- build_info(current_name = current_name, id = updated_id, synonyms = synonyms, classification = tax_class)
# Verificar que el tibble tiene las columnas correctas
if (is_tibble(tibble_result)) {
print("Successfully created a tibble with add_info = TRUE.")
} else {
warning("build_info did not return a tibble as expected.")
}
# Devolver el tibble
return(tibble_result)
} else {
# Si no se puede obtener información válida, retornar el nombre base
return(tibble(fungi_name = base_name))
}
}, error = function(e) {
warning("Error processing web page: ", e$message)
return(tibble())  # Devolver un tibble vacío si hay error
})
return(result)
})
# Si no se requiere información adicional, devolver solo un vector de resultados
if (!add_info) {
return(unlist(result))
}
return(result)
}
test_that("get_fungal_name returns list with add_info = TRUE", {
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE)
expect_true(is_tibble(result), label = "Expected a tibble, got something else.")
expect_equal(ncol(result), 11)  # Asegúrate de que tenga el número correcto de columnas
expect_false(is.null(result), label = "Expected non-null result.")
})
result
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE)
result
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE) %>% unlist()
result
test_that("get_fungal_name returns list with add_info = TRUE", {
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE) %>% unlist()
expect_true(is_tibble(result), label = "Expected a tibble, got something else.")
expect_equal(ncol(result), 11)  # Asegúrate de que tenga el número correcto de columnas
expect_false(is.null(result), label = "Expected non-null result.")
})
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE) %>% unlist %>% as_tibble()
result
test_that("get_fungal_name returns list with add_info = TRUE", {
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE) %>% unlist %>% as_tibble()
expect_true(is_tibble(result), label = "Expected a tibble, got something else.")
expect_equal(ncol(result), 11)  # Asegúrate de que tenga el número correcto de columnas
expect_false(is.null(result), label = "Expected non-null result.")
})
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE)
result
build_info(current_name = "Lactarius deliciosus (L.) Gray", id = 224737, synonyms = synonyms, classification = tax_class)
build_info(current_name = "Lactarius deliciosus (L.) Gray", id = 224737, synonyms = "hola", classification = "hola")
build_info(current_name = "Lactarius deliciosus (L.) Gray", id = 224737, synonyms = "hola", classification = c("hola", "hola2"))
test_that("get_fungal_name returns list with add_info = TRUE", {
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE)
expect_true(is_list(result))
expect_equal(ncol(result), 11)  # Asegúrate de que tenga el número correcto de columnas
})
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE)
result
expect_true(is_list(result))
expect_true(is_list(result))
expect_equal(ncol(result), 11)  # Asegúrate de que tenga el número correcto de columnas
get_fungal_name("Amanita deliciosa", add_info = T)
get_fungal_name("Amanita deliciosa")
get_fungal_name <- function(name, add_info = FALSE) {
# Asegurarse de que los nombres estén en formato correcto, manejar NA
name <- ifelse(is.na(name), NA, str_to_sentence(name))
result <- purrr::map(name, ~ {
# Si el nombre es NA, se devuelve NA
if (is.na(.)) {
return(NA)
}
# Limpiar el nombre y clasificarlo
name <- clean_names(.)
classification <- classify_name(name)
type <- classification$type
base_name <- classification$name
# Si no es una especie, se retorna NA
if (type != "sp.") {
warning(paste("The function can only update names for taxa classified as species. The name", name, "is classified as", type, "and therefore no update will be made."))
return(NA)
}
# Intentar buscar la especie en Index Fungorum
IF_data <- tryCatch({
taxize::fg_name_search(base_name, limit = 6000) %>%
filter(infraspecific_rank == type)
}, error = function(e) {
warning("Failed to query Index Fungorum: ", e$message)
return(tibble())  # Devuelve un tibble vacío si hay error
})
# Si no se encuentra ningún dato, se retorna NA
if (nrow(IF_data) == 0) {
warning(paste("No updates found for the species", base_name, "in Index Fungorum."))
return(NA)
}
# Renombrar la columna para asegurar que la ID se tenga correctamente
IF_data <- IF_data %>%
dplyr::rename(id = dplyr::if_else(
"current_name_record_number" %in% names(.),
"current_name_record_number",
"record_number"
))
# Obtener el ID actualizado
updated_id <- get_updated_id(IF_data, base_name)
# Si no hay un ID válido, retornar NA
if (is.na(updated_id)) {
warning(paste("No valid ID found for the species", base_name, "in Index Fungorum."))
return(NA)
}
# Construir las URL para los detalles de la especie
url_name  <- paste0("https://www.speciesfungorum.org/Names/SynSpecies.asp?RecordID=", updated_id)
url_class <- paste0("https://www.indexfungorum.org/names/NamesRecord.asp?RecordID=", updated_id)
result <- tryCatch({
# Obtener información de la página web
web_name <- rvest::read_html(url_name) %>%
rvest::html_nodes("p") %>%
rvest::html_text()
# Obtener la clasificación taxonómica
tax_class <- extract_classification(url_class)
# Si no es un nombre de referencia, procesar el nombre
if (!str_detect(web_name[1], "Click on")) {
current_name <- web_name[1] %>%
str_remove("Current Name:") %>%
str_remove("\\,.+") %>%
str_remove("\\s\\[.+\\]")
# Si no se requiere información adicional, solo retornar el nombre limpio
if (!add_info) {
return(clean_names(current_name))
}
# Obtener los sinónimos
synonyms <- web_name[2] %>%
str_remove("Synonymy:") %>%
str_remove_all("\\s\\[\\d+\\]") %>%
str_split(" \\(\\d+\\)") %>%
unlist() %>%
clean_names() %>%
str_extract(".+") %>%
unique() %>%
na.omit()
# Asegurarse de que build_info siempre devuelva un tibble
tibble_result <- build_info(current_name = current_name, id = updated_id, synonyms = synonyms, classification = tax_class)
# Verificar que el tibble tiene las columnas correctas
if (is_tibble(tibble_result)) {
#print("Successfully created a tibble with add_info = TRUE.")
} else {
warning("build_info did not return a tibble as expected.")
}
# Devolver el tibble
return(tibble_result)
} else {
# Si no se puede obtener información válida, retornar el nombre base
return(tibble(fungi_name = base_name))
}
}, error = function(e) {
warning("Error processing web page: ", e$message)
return(tibble())  # Devolver un tibble vacío si hay error
})
return(result)
})
# Si no se requiere información adicional, devolver solo un vector de resultados
if (!add_info) {
return(unlist(result))
}
return(result)
}
get_fungal_name("Amanita deliciosa", add_info = T)
test_that("get_fungal_name returns list with add_info = TRUE", {
# Probar que cuando add_info es TRUE, la salida es un tibble
result <- get_fungal_name("Lactarius deliciosus", add_info = TRUE)
expect_true(is_tibble(result))
expect_equal(ncol(result), 11)  # Asegúrate de que tenga el número correcto de columnas
})
get_fungal_name("Amanita deliciosa", add_info = T)
get_fungal_name( c("Amanita sp.", "Amanita deliciosa"), add_info = T)
#'
#' This function updates fungal names based on the species classification
#' and retrieves information from Index Fungorum. It only works for species.
#'
#' @param name A character vector containing the fungal names to update.
#' @param add_info A logical value indicating whether to return additional information
#'   about the species (default is FALSE) such as the synonyms and the taxonomic classification.
#' @return A character vector with updated names, or a tibble with additional information
#'   if add_info = TRUE.
#' @export
get_fungal_name <- function(name, add_info = FALSE) {
name <- ifelse(is.na(name), NA, str_to_sentence(name))
result <- purrr::map(name, ~ {
if (is.na(.)) {
return(NA)
}
name <- clean_names(.)
classification <- classify_name(name)
type <- classification$type
base_name <- classification$name
if (type != "sp.") {
warning(paste("The function can only update names for taxa classified as species. The name", name, "is classified as", type, "and therefore no update will be made."))
return(NA)
}
IF_data <- tryCatch({
taxize::fg_name_search(base_name, limit = 6000) %>%
filter(infraspecific_rank == type)
}, error = function(e) {
warning("Failed to query Index Fungorum: ", e$message)
return(tibble())
})
if (nrow(IF_data) == 0) {
warning(paste("No updates found for the species", base_name, "in Index Fungorum."))
return(NA)
}
IF_data <- IF_data %>%
dplyr::rename(id = dplyr::if_else(
"current_name_record_number" %in% names(.),
"current_name_record_number",
"record_number"
))
updated_id <- get_updated_id(IF_data, base_name)
if (is.na(updated_id)) {
warning(paste("No valid ID found for the species", base_name, "in Index Fungorum."))
return(NA)
}
url_name  <- paste0("https://www.speciesfungorum.org/Names/SynSpecies.asp?RecordID=", updated_id)
url_class <- paste0("https://www.indexfungorum.org/names/NamesRecord.asp?RecordID=", updated_id)
result <- tryCatch({
web_name <- rvest::read_html(url_name) %>%
rvest::html_nodes("p") %>%
rvest::html_text()
tax_class <- extract_classification(url_class)
if (!str_detect(web_name[1], "Click on")) {
current_name <- web_name[1] %>%
str_remove("Current Name:") %>%
str_remove("\\,.+") %>%
str_remove("\\s\\[.+\\]")
if (!add_info) {
return(clean_names(current_name))
}
synonyms <- web_name[2] %>%
str_remove("Synonymy:") %>%
str_remove_all("\\s\\[\\d+\\]") %>%
str_split(" \\(\\d+\\)") %>%
unlist() %>%
clean_names() %>%
str_extract(".+") %>%
unique() %>%
na.omit()
return(build_info(current_name = current_name, id = updated_id, synonyms = synonyms, classification = tax_class))
} else {
return(base_name)
}
}, error = function(e) {
warning("Error processing web page: ", e$message)
return(NA)
})
return(result)
})
if (!add_info) {
return(unlist(result))
}
return(result)
}
get_fungal_name( c("Amanita sp.", "Amanita deliciosa"), add_info = T)
test_that("get_fungal_name returns NA for genus names", {
expect_warning({
result <- get_fungal_name("Amanita")
}, "The function can only update names for taxa classified as species")
expect_equal(result, NA)
})
test_that("get_fungal_name returns updated name for species", {
result <- get_fungal_name("Amanita muscaria")
expect_equal(result, "Amanita muscaria")
})
test_that("get_fungal_name returns NA for unrecognized species", {
result <- get_fungal_name("Amanita deliciosus")
expect_equal(result, NA)
})
test_that("get_fungal_name returns NA for unrecognized species", {
expect_warning({
result <- get_fungal_name("Amanita deliciosus")
}, "Failed to query Index Fungorum")
expect_equal(result, NA)
})
test_that("get_fungal_name handles missing or NA input", {
result <- get_fungal_name(NA)
expect_equal(result, NA)
})
test_that("get_fungal_name returns a character vector with add_info = FALSE", {
result <- get_fungal_name("Lactarius deliciosus", add_info = FALSE)
expect_true(is.character(result))
})
testthat::test_dir("tests")
install.packages("fungitax")
devtools::install()
library(fungitax)
testthat::test_dir("tests")
species <- c("Amanita deliciosa", "Lactarius vinosus", "Cortinarius sanguineus", "Paxillus involutus", "Gaestrum triplex")
species
get_fungal_name(species)
species <- c("Amanita deliciosa", "Lactarius vinosus", "Cortinarius sanguineus", "Paxillus involutus", "Geastrum triplex")
get_fungal_name(species)
get_fungal_name(species, add_info = T)
species <- c("Amanita delicios", "LACTARIUS VINOSUS", NA, "Paxillus", "Gaestrum")
get_fungal_name(species)
# Al darle un vector con 5 especies de hongos nos devuelve los nombres actualizados, en caso de que exista una actuializacion
species <- c("Amanita deliciosa", "Lactarius vinosus", "Geastrum triplex")
get_fungal_name(species)
tibble(species = species) %>%
mutate(new.name = get_fungal_name(species)) %>%
unnes(new.name)
# Al darle un vector de especies de hongos nos devuelve los nombres actualizados, en caso de que exista una actuializacion
species <- c("Amanita deliciosa", "Lactarius vinosus", "Geastrum triplex")
# Si se precisa de informacion adicional, esta sera dada dentro de una lista. Puede extraerla con tidyr::unnest()
tibble(species = species) %>%
mutate(new.name = get_fungal_name(species)) %>%
unnest(new.name)
# Si se precisa de informacion adicional, esta sera dada dentro de una lista. Puede extraerla con tidyr::unnest()
tibble(species = species) %>%
mutate(new.name = get_fungal_name(species, add_info = T)) %>%
unnest(new.name)
new.names <- c(NULL)
for(sp in species){
new.sp.name <- get_fungal_name(species)
new.names <- c(new.names, new.sp.name)
cat(1, " of ", length(species))
}
2
2
new.names <- c(NULL)
for(sp in species){
new.sp.name <- get_fungal_name(species)
new.names <- c(new.names, new.sp.name)
cat(1, "of", length(species), "done.\n")
}
sp
match(sp, species)
for(sp in species){
new.sp.name <- get_fungal_name(species)
new.names <- c(new.names, new.sp.name)
cat(match(sp, species), "of", length(species), "done.\n")
}
new.names
new.names <- c(NULL)
for(sp in species){
new.sp.name <- get_fungal_name(species)
new.names <- c(new.names, new.sp.name)
cat(match(sp, species), "of", length(species), "done.\n")
}
new.names
# Para consultas largas, puede estar bien saber en que punto del proceso se encuentra. Un ejemplo fácil podria ser:
new.names <- c(NULL)
# Para consultas largas, puede estar bien saber en que punto del proceso se encuentra. Un ejemplo fácil podria ser:
new.names <- c(NULL)
for(sp in species){
new.sp.name <- get_fungal_name(sp)
new.names <- c(new.names, new.sp.name)
cat(match(sp, species), "of", length(species), "done.\n")
}
new.names
taxize::fg_name_search
taxize:::by_name_search
devtools::document()
rm(list = c("get_fungal_name"))
devtools::document()
